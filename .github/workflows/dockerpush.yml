name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  schedule:
    - cron:  '1 * * * *'

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: cas6-rh-ubi7
  BUILD_BRANCH: oulib-6.1
  REPO_NAME: ${{ github.repository }} 

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log into registry.redhat.io
        run: echo "${{ secrets.RH_REGISTRY_TOKEN }}" | docker login registry.redhat.io -u '${{ secrets.RH_REGISTRY_USER }}' --password-stdin
      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build --build-arg BRANCH=$BUILD_BRANCH
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build --build-arg BRANCH=$BUILD_BRANCH . --file Dockerfile
          fi

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v2
      - name: Log into registry.redhat.io
        run: echo "${{ secrets.RH_REGISTRY_TOKEN }}" | docker login registry.redhat.io -u '${{ secrets.RH_REGISTRY_USER }}' --password-stdin
      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into docker.pkg.github.com
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image to docker.pkg.github.com
        run: |
          IMAGE_ID=docker.pkg.github.com/${REPO_NAME,,}/$IMAGE_NAME-$BUILD_BRANCH

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
